import streamlit as st
import numpy as np
import trimesh
import tempfile
import plotly.graph_objects as go
from typing import List

st.set_page_config(page_title="3DCP Slicer", layout="wide")
st.title("3DCP Slicer")

# -----------------------
# Geometry helpers
# -----------------------
def trim_segment_end(segment, trim_distance=30.0):
    segment = np.array(segment)
    total_len = np.sum(np.linalg.norm(np.diff(segment, axis=0), axis=1))
    if total_len <= trim_distance:
        return segment
    trimmed = [segment[0]]
    acc = 0.0
    for i in range(1, len(segment)):
        p1, p2 = segment[i - 1], segment[i]
        d = np.linalg.norm(p2 - p1)
        if acc + d >= total_len - trim_distance:
            r = (total_len - trim_distance - acc) / d
            trimmed.append(p1 + (p2 - p1) * r)
            break
        trimmed.append(p2)
        acc += d
    return np.array(trimmed)

def simplify_segment(segment, min_dist):
    simplified = [segment[0]]
    for pt in segment[1:-1]:
        if np.linalg.norm(pt[:2] - simplified[-1][:2]) >= min_dist:
            simplified.append(pt)
    simplified.append(segment[-1])
    return np.array(simplified)

def shift_to_nearest_start(segment, ref_point):
    idx = np.argmin(np.linalg.norm(segment[:, :2] - ref_point, axis=1))
    return np.concatenate([segment[idx:], segment[1:idx + 1]], axis=0), segment[idx]

# -----------------------
# G-code generator
# -----------------------
def generate_gcode(mesh, z_int=30.0, feed=2000, ref_pt_user=(0.0, 0.0),
                   e_on=False, start_e_on=False, start_e_val=0.1, e0_on=False,
                   trim_dist=30.0, min_spacing=3.0, auto_start=False, m30_on=False):
    extrusion_k = 0.05
    g = ["; *** Generated by 3DCP Slicer ***", "G21", "G90"]
    if e_on:
        g.append("M83")

    z_max = mesh.bounds[1, 2]
    z_values = list(np.arange(z_int, z_max + 0.001, z_int))
    if abs(z_max - z_values[-1]) > 1e-3:
        z_values.append(z_max)
    z_values.append(z_max + 0.01)

    prev_start_xy = None
    for z in z_values:
        sec = mesh.section(plane_origin=[0,0,z], plane_normal=[0,0,1])
        if sec is None:
            continue
        try:
            slice2D, to3D = sec.to_2D()
        except Exception:
            continue
        segments = []
        for seg in slice2D.discrete:
            seg = np.array(seg)
            seg3d = (to3D @ np.hstack([seg, np.zeros((len(seg),1)), np.ones((len(seg),1))]).T).T[:, :3]
            segments.append(seg3d)
        if not segments:
            continue

        g.append(f"\n; ---------- Z = {z:.2f} mm ----------")
        if auto_start and prev_start_xy is not None:
            dists = [np.linalg.norm(s[0][:2] - prev_start_xy) for s in segments]
            first_idx = int(np.argmin(dists))
            segments = segments[first_idx:] + segments[:first_idx]
            ref_pt_layer = prev_start_xy
        else:
            ref_pt_layer = np.array(ref_pt_user)

        for i_seg, seg3d in enumerate(segments):
            shifted, _  = shift_to_nearest_start(seg3d, ref_pt_layer)
            trimmed     = trim_segment_end(shifted, trim_dist)
            simplified  = simplify_segment(trimmed, min_spacing)
            start       = simplified[0]

            g.append(f"G01 F{feed}")
            if start_e_on:
                g.append(f"G01 X{start[0]:.3f} Y{start[1]:.3f} Z{z:.3f} E{start_e_val:.5f}")
            else:
                g.append(f"G01 X{start[0]:.3f} Y{start[1]:.3f} Z{z:.3f}")

            for p1, p2 in zip(simplified[:-1], simplified[1:]):
                dist = np.linalg.norm(p2[:2] - p1[:2])
                if e_on:
                    g.append(f"G01 X{p2[0]:.3f} Y{p2[1]:.3f} E{dist * extrusion_k:.5f}")
                else:
                    g.append(f"G01 X{p2[0]:.3f} Y{p2[1]:.3f}")

            if e0_on:
                g.append("G01 E0")

            if i_seg == 0:
                prev_start_xy = start[:2]

    g.append(f"G01 F{feed}")
    if m30_on:
        g.append("M30")
    return "\n".join(g)

# -----------------------
# Slice path computation (for preview)
# -----------------------
def compute_slice_paths(mesh, z_int=30.0, ref_pt_user=(0.0, 0.0),
                        trim_dist=30.0, min_spacing=3.0, auto_start=False,
                        e_on=False):
    z_max = mesh.bounds[1, 2]
    z_values = list(np.arange(z_int, z_max + 0.001, z_int))
    if abs(z_max - z_values[-1]) > 1e-3:
        z_values.append(z_max)
    z_values.append(z_max + 0.01)

    prev_start_xy = None
    paths = []
    for z in z_values:
        sec = mesh.section(plane_origin=[0,0,z], plane_normal=[0,0,1])
        if sec is None:
            continue
        try:
            slice2D, to3D = sec.to_2D()
        except Exception:
            continue

        segments = []
        for seg in slice2D.discrete:
            seg = np.array(seg)
            seg3d = (to3D @ np.hstack([seg, np.zeros((len(seg),1)), np.ones((len(seg),1))]).T).T[:, :3]
            segments.append(seg3d)
        if not segments:
            continue

        if auto_start and prev_start_xy is not None:
            dists = [np.linalg.norm(s[0][:2] - prev_start_xy) for s in segments]
            first_idx = int(np.argmin(dists))
            segments = segments[first_idx:] + segments[:first_idx]
            ref_pt_layer = prev_start_xy
        else:
            ref_pt_layer = np.array(ref_pt_user)

        for i_seg, seg3d in enumerate(segments):
            shifted, _ = shift_to_nearest_start(seg3d, ref_pt_layer)
            trimmed    = trim_segment_end(shifted, trim_dist)
            simplified = simplify_segment(trimmed, min_spacing)

            # E 값 누적 계산
            if e_on:
                extrusion_k = 0.05
                e_values = [0.0]
                total = 0.0
                for p1, p2 in zip(simplified[:-1], simplified[1:]):
                    dist = np.linalg.norm(p2[:2] - p1[:2])
                    total += dist * extrusion_k
                    e_values.append(total)
                paths.append((simplified, np.array(e_values)))
            else:
                paths.append((simplified, None))

            if i_seg == 0:
                prev_start_xy = simplified[0][:2]
    return paths

# -----------------------
# Plotly visualizations
# -----------------------
def plot_trimesh(mesh: trimesh.Trimesh) -> go.Figure:
    v = mesh.vertices
    f = mesh.faces
    fig = go.Figure(data=[go.Mesh3d(
        x=v[:,0], y=v[:,1], z=v[:,2],
        i=f[:,0], j=f[:,1], k=f[:,2],
        opacity=0.6, flatshading=True
    )])
    fig.update_layout(scene=dict(aspectmode="data"))
    return fig

def plot_paths(paths: List, e_on=False) -> go.Figure:
    fig = go.Figure()
    for poly, e_vals in paths:
        if e_on and e_vals is not None:
            fig.add_trace(go.Scatter3d(
                x=poly[:,0], y=poly[:,1], z=poly[:,2],
                mode="lines+text",
                line=dict(width=3),
                text=[f"E={e:.2f}" for e in e_vals],
                textposition="top center",
                showlegend=False
            ))
        else:
            fig.add_trace(go.Scatter3d(
                x=poly[:,0], y=poly[:,1], z=poly[:,2],
                mode="lines",
                line=dict(width=3),
                showlegend=False
            ))
    fig.update_layout(scene=dict(aspectmode="data"))
    return fig

# -----------------------
# Layout
# -----------------------
col_left, col_right = st.columns([0.4, 0.6])

with col_left:
    st.header("Parameters")
    z_int        = st.number_input("Z interval (mm)",  1.0, 1000.0, 15.0)
    feed         = st.number_input("Feedrate (F)",     1,    100000, 2000)
    ref_x        = st.number_input("Reference X",      value=0.0)
    ref_y        = st.number_input("Reference Y",      value=0.0)

    st.subheader("Extrusion options")
    e_on         = st.checkbox("Insert E values")
    start_e_on   = st.checkbox("Continuous Layer Printing", value=False, disabled=not e_on)
    start_e_val  = st.number_input("Start E value", value=0.1, disabled=not (e_on and start_e_on))
    e0_on        = st.checkbox("Add E0 at loop end", value=False, disabled=not e_on)

    st.subheader("Path processing")
    trim_dist    = st.number_input("Trim/Layer Width (mm)", 0.0, 1000.0, 50.0)
    min_spacing  = st.number_input("Minimum point spacing (mm)", 0.0, 1000.0, 3.0)
    auto_start   = st.checkbox("Start next layer near previous start")
    m30_on       = st.checkbox("Append M30 at end", value=False)

    uploaded = st.file_uploader("Upload STL", type=["stl"])

    mesh = None
    if uploaded is not None:
        with tempfile.NamedTemporaryFile(delete=False, suffix=".stl") as tmp:
            tmp.write(uploaded.read())
            tmp_path = tmp.name
        mesh = trimesh.load_mesh(tmp_path)
        scale_matrix = np.eye(4)
        scale_matrix[2, 2] = 1.0000001
        mesh.apply_transform(scale_matrix)
        st.success("STL loaded")

        if st.button("슬라이싱"):
            paths = compute_slice_paths(mesh, z_int, (ref_x, ref_y),
                                        trim_dist, min_spacing, auto_start, e_on)
            st.session_state.paths = paths
            st.success("Slicing complete")

        if st.button("G-code 생성"):
            gcode_text = generate_gcode(mesh, z_int, feed, (ref_x, ref_y),
                                        e_on, start_e_on, start_e_val,
                                        e0_on, trim_dist, min_spacing,
                                        auto_start, m30_on)
            st.session_state.gcode_text = gcode_text
            st.success("G-code ready")

        if "gcode_text" in st.session_state:
            st.download_button("G-code 저장", st.session_state.gcode_text,
                               file_name="output.gcode", mime="text/plain")

with col_right:
    if uploaded is not None and mesh is not None:
        st.subheader("STL Preview")
        st.plotly_chart(plot_trimesh(mesh), use_container_width=True)

        if "paths" in st.session_state:
            st.subheader("Sliced Paths (3D)")
            st.plotly_chart(plot_paths(st.session_state.paths, e_on), use_container_width=True)
