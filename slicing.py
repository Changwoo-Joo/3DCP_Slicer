import streamlit as st
import numpy as np
import trimesh
import tempfile
import plotly.graph_objects as go
from typing import List, Tuple, Optional
from datetime import date, datetime
from pathlib import Path  # 파일명 추출용
import time  # ▶ 재생용

# =========================
# App basics
# =========================
st.set_page_config(page_title="3DCP Slicer", layout="wide")
st.title("3DCP Slicer")

EXTRUSION_K = 0.05
PATH_COLOR = "#222222"  # 단색 유지

# =========================
# Helpers
# =========================
def trim_segment_end(segment, trim_distance=30.0):
    """XY 누적 길이 기준으로 마지막 trim_distance만큼 잘라냄."""
    segment = np.array(segment, dtype=float)
    if len(segment) < 2:
        return segment
    total_len = np.sum(np.linalg.norm(np.diff(segment, axis=0)[:, :2], axis=1))
    if total_len <= trim_distance:
        return segment
    trimmed = [segment[0]]
    acc = 0.0
    for i in range(1, len(segment)):
        p1, p2 = segment[i - 1], segment[i]
        d = np.linalg.norm((p2 - p1)[:2])
        if d == 0:
            continue
        if acc + d >= total_len - trim_distance:
            r = (total_len - trim_distance - acc) / d
            trimmed.append(p1 + (p2 - p1) * r)
            break
        trimmed.append(p2)
        acc += d
    return np.array(trimmed)

def simplify_segment(segment: np.ndarray, min_dist: float) -> np.ndarray:
    """
    XY 기준 Ramer–Douglas–Peucker 간소화.
    - 직선 구간은 양 끝점만 유지 (중간 포인트 제거)
    - 곡선/꺾임이 있는 부분만 점 유지
    - min_dist(=epsilon 규모)를 키울수록 더 과감히 단순화
    """
    pts = np.asarray(segment, dtype=float)
    if len(pts) <= 2 or min_dist <= 0:
        return pts

    eps = float(min_dist) / 2.0  # 권장: 최소 간격의 절반 정도 허용 오차

    def _perp_dist_xy(p, a, b) -> float:
        ab = b[:2] - a[:2]
        ap = p[:2] - a[:2]
        denom = np.dot(ab, ab)
        if denom <= 1e-18:
            return np.linalg.norm(ap)
        t = np.clip(np.dot(ap, ab) / denom, 0.0, 1.0)
        proj = a[:2] + t * ab
        return np.linalg.norm(p[:2] - proj)

    def _rdp_xy(points: np.ndarray, eps_val: float) -> np.ndarray:
        if len(points) <= 2:
            return points
        a = points[0]
        b = points[-1]
        # 가장 멀리 벗어나는 점 탐색
        dmax = -1.0
        idx = -1
        for i in range(1, len(points) - 1):
            d = _perp_dist_xy(points[i], a, b)
            if d > dmax:
                dmax = d
                idx = i
        if dmax <= eps_val:
            # 충분히 직선으로 근사 가능 → 끝점만
            return np.vstack([a, b])
        # 곡률 존재 → 분할
        left = _rdp_xy(points[: idx + 1], eps_val)
        right = _rdp_xy(points[idx:], eps_val)
        return np.vstack([left[:-1], right])  # 분기점 중복 제거

    return _rdp_xy(pts, eps)

def shift_to_nearest_start(segment, ref_point):
    """시작점을 ref_point(XY)에서 가장 가까운 정점으로 돌려 배치."""
    idx = np.argmin(np.linalg.norm(segment[:, :2] - ref_point, axis=1))
    return np.concatenate([segment[idx:], segment[:idx]], axis=0), segment[idx]

# =========================
# G-code generator
# =========================
def generate_gcode(mesh, z_int=30.0, feed=2000, ref_pt_user=(0.0, 0.0),
                   e_on=False, start_e_on=False, start_e_val=0.1, e0_on=False,
                   trim_dist=30.0, min_spacing=3.0, auto_start=False, m30_on=False):
    g = ["; *** Generated by 3DCP Slicer ***", "G21", "G90"]
    if e_on:
        g.append("M83")

    z_max = mesh.bounds[1, 2]
    z_values = list(np.arange(z_int, z_max + 0.001, z_int))
    if abs(z_max - z_values[-1]) > 1e-3:
        z_values.append(z_max)
    z_values.append(z_max + 0.01)  # 최상단 캡쳐

    prev_start_xy = None
    for z in z_values:
        sec = mesh.section(plane_origin=[0, 0, z], plane_normal=[0, 0, 1])
        if sec is None:
            continue
        try:
            slice2D, to3D = sec.to_2D()
        except Exception:
            continue

        segments = []
        for seg in slice2D.discrete:
            seg = np.array(seg)
            seg3d = (to3D @ np.hstack([seg, np.zeros((len(seg), 1)), np.ones((len(seg), 1))]).T).T[:, :3]
            segments.append(seg3d)
        if not segments:
            continue

        g.append(f"\n; ---------- Z = {z:.2f} mm ----------")

        if auto_start and prev_start_xy is not None:
            dists = [np.linalg.norm(s[0][:2] - prev_start_xy) for s in segments]
            first_idx = int(np.argmin(dists))
            segments = segments[first_idx:] + segments[:first_idx]
            ref_pt_layer = prev_start_xy
        else:
            ref_pt_layer = np.array(ref_pt_user, dtype=float)

        for i_seg, seg3d in enumerate(segments):
            shifted, _ = shift_to_nearest_start(seg3d, ref_pt_layer)
            trimmed = trim_segment_end(shifted, trim_dist)
            simplified = simplify_segment(trimmed, min_spacing)
            start = simplified[0]

            g.append(f"G01 F{feed}")
            if start_e_on:
                g.append(f"G01 X{start[0]:.3f} Y{start[1]:.3f} Z{z:.3f} E{start_e_val:.5f}")
            else:
                g.append(f"G01 X{start[0]:.3f} Y{start[1]:.3f} Z{z:.3f}")

            for p1, p2 in zip(simplified[:-1], simplified[1:]):
                dist = np.linalg.norm(p2[:2] - p1[:2])
                if e_on:
                    g.append(f"G01 X{p2[0]:.3f} Y{p2[1]:.3f} E{dist * EXTRUSION_K:.5f}")
                else:
                    g.append(f"G01 X{p2[0]:.3f} Y{p2[1]:.3f}")

            if e0_on:
                g.append("G01 E0")

            if i_seg == 0:
                prev_start_xy = start[:2]

    g.append(f"G01 F{feed}")
    if m30_on:
        g.append("M30")
    return "\n".join(g)

# =========================
# Slice path computation (미리보기용)
# =========================
def compute_slice_paths_with_travel(
    mesh,
    z_int=30.0,
    ref_pt_user=(0.0, 0.0),
    trim_dist=30.0,
    min_spacing=3.0,
    auto_start=False,
    e_on=False
) -> List[Tuple[np.ndarray, Optional[np.ndarray], bool]]:
    z_max = mesh.bounds[1, 2]
    z_values = list(np.arange(z_int, z_max + 0.001, z_int))
    if abs(z_max - z_values[-1]) > 1e-3:
        z_values.append(z_max)
    z_values.append(z_max + 0.01)

    all_items: List[Tuple[np.ndarray, Optional[np.ndarray], bool]] = []
    prev_layer_last_end: Optional[np.ndarray] = None
    prev_start_xy = None

    for z in z_values:
        sec = mesh.section(plane_origin=[0, 0, z], plane_normal=[0, 0, 1])
        if sec is None:
            continue
        try:
            slice2D, to3D = sec.to_2D()
        except Exception:
            continue

        segments = []
        for seg in slice2D.discrete:
            seg = np.array(seg)
            seg3d = (to3D @ np.hstack([seg, np.zeros((len(seg), 1)), np.ones((len(seg), 1))]).T).T[:, :3]
            segments.append(seg3d)
        if not segments:
            continue

        if auto_start and prev_start_xy is not None:
            dists = [np.linalg.norm(s[0][:2] - prev_start_xy) for s in segments]
            first_idx = int(np.argmin(dists))
            segments = segments[first_idx:] + segments[:first_idx]
            ref_pt_layer = prev_start_xy
        else:
            ref_pt_layer = np.array(ref_pt_user, dtype=float)

        layer_polys: List[np.ndarray] = []
        for i_seg, seg3d in enumerate(segments):
            shifted, _ = shift_to_nearest_start(seg3d, ref_pt_layer)
            trimmed = trim_segment_end(shifted, trim_dist)
            simplified = simplify_segment(trimmed, min_spacing)
            layer_polys.append(simplified.copy())
            if i_seg == 0:
                prev_start_xy = simplified[0][:2]

        if not layer_polys:
            continue

        first_poly_start = layer_polys[0][0]
        if prev_layer_last_end is not None:
            travel = np.vstack([prev_layer_last_end, first_poly_start])
            all_items.append((travel, np.array([0.0, 0.0]) if e_on else None, True))

        for poly in layer_polys:
            if e_on:
                e_vals = [0.0]
                total = 0.0
                for p1, p2 in zip(poly[:-1], poly[1:]):
                    dist = np.linalg.norm(p2[:2] - p1[:2])
                    total += dist * EXTRUSION_K
                    e_vals.append(total)
                all_items.append((poly, np.array(e_vals), False))
            else:
                all_items.append((poly, None, False))

        prev_layer_last_end = layer_polys[-1][-1]

    return all_items

# === NEW: 경로 → 세그먼트 변환 & Z 필터 ===
def items_to_segments(items: List[Tuple[np.ndarray, Optional[np.ndarray], bool]], e_on: bool,
                      z_filter: Optional[float]) -> List[Tuple[np.ndarray, np.ndarray, bool, bool]]:
    """
    items -> segment 리스트로 변환
    반환: [(p1, p2, is_travel, is_extruding), ...]
    Z 필터가 주어지면 max(z1,z2) <= z_filter 인 세그먼트만 남김
    """
    segs = []
    for poly, e_vals, is_travel in items or []:
        if poly is None or len(poly) < 2:
            continue
        if e_on and e_vals is not None:
            for p1, p2, e1, e2 in zip(poly[:-1], poly[1:], e_vals[:-1], e_vals[1:]):
                is_extruding = (e2 - e1) > 1e-12 and (not is_travel)
                if z_filter is not None:
                    if max(p1[2], p2[2]) > z_filter + 1e-9:
                        continue
                segs.append((p1, p2, is_travel, is_extruding))
        else:
            for p1, p2 in zip(poly[:-1], poly[1:]):
                if z_filter is not None:
                    if max(p1[2], p2[2]) > z_filter + 1e-9:
                        continue
                segs.append((p1, p2, is_travel, True))  # e_off인 경우 전부 실선 처리
    return segs

# === NEW: 세그먼트 일부만 그려 Plotly 그림 생성 ===
def plot_segments_partial(segments: List[Tuple[np.ndarray, np.ndarray, bool, bool]],
                          upto_count: int, height=820) -> go.Figure:
    upto = max(0, min(upto_count, len(segments)))
    fig = go.Figure()
    for i in range(upto):
        p1, p2, is_travel, is_extruding = segments[i]
        dash_style = "dot" if (is_travel or not is_extruding) else "solid"
        fig.add_trace(go.Scatter3d(
            x=[p1[0], p2[0]], y=[p1[1], p2[1]], z=[p1[2], p2[2]],
            mode="lines",
            line=dict(width=3, dash=dash_style, color=PATH_COLOR),
            showlegend=False
        ))
    fig.update_layout(scene=dict(aspectmode="data"),
                      height=height, margin=dict(l=0, r=0, t=10, b=0))
    return fig

# =========================
# Plotly: STL & Paths
# =========================
def plot_trimesh(mesh: trimesh.Trimesh, height=820) -> go.Figure:
    v = mesh.vertices
    f = mesh.faces
    fig = go.Figure(data=[go.Mesh3d(
        x=v[:, 0], y=v[:, 1], z=v[:, 2],
        i=f[:, 0], j=f[:, 1], k=f[:, 2],
        color="#888888",
        opacity=0.6,
        flatshading=True
    )])
    fig.update_layout(scene=dict(aspectmode="data"),
                      height=height, margin=dict(l=0, r=0, t=10, b=0))
    return fig

def plot_paths(items: List[Tuple[np.ndarray, Optional[np.ndarray], bool]], e_on=False, height=820) -> go.Figure:
    fig = go.Figure()
    for poly, e_vals, is_travel in items:
        if e_on and e_vals is not None:
            for (p1, p2, e1, e2) in zip(poly[:-1], poly[1:], e_vals[:-1], e_vals[1:]):
                dash_style = "solid" if (e2 - e1) > 1e-12 else "dot"
                fig.add_trace(go.Scatter3d(
                    x=[p1[0], p2[0]], y=[p1[1], p2[1]], z=[p1[2], p2[2]],
                    mode="lines",
                    line=dict(width=3, dash=dash_style, color=PATH_COLOR),
                    showlegend=False
                ))
        else:
            fig.add_trace(go.Scatter3d(
                x=poly[:, 0], y=poly[:, 1], z=poly[:, 2],
                mode="lines", line=dict(width=3, color=PATH_COLOR),
                showlegend=False
            ))
    fig.update_layout(scene=dict(aspectmode="data"),
                      height=height, margin=dict(l=0, r=0, t=10, b=0))
    return fig

# =========================
# Session init
# =========================
if "mesh" not in st.session_state:
    st.session_state.mesh = None
if "paths_items" not in st.session_state:
    st.session_state.paths_items = None
if "gcode_text" not in st.session_state:
    st.session_state.gcode_text = None
if "base_name" not in st.session_state:
    st.session_state.base_name = "output"

# ==== Rapid session keys (추가 기능용) ====
if "show_rapid_panel" not in st.session_state:
    st.session_state.show_rapid_panel = False
if "rapid_rx" not in st.session_state:
    st.session_state.rapid_rx = 0.0
if "rapid_ry" not in st.session_state:
    st.session_state.rapid_ry = 0.0
if "rapid_rz" not in st.session_state:
    st.session_state.rapid_rz = 0.0
if "rapid_text" not in st.session_state:
    st.session_state.rapid_text = None

# ==== NEW: 애니메이션/필터 상태 ====
if "paths_z_filter" not in st.session_state:
    st.session_state.paths_z_filter = None  # float | None
if "paths_anim_play" not in st.session_state:
    st.session_state.paths_anim_play = False
if "paths_anim_index" not in st.session_state:
    st.session_state.paths_anim_index = 0
if "paths_anim_speed" not in st.session_state:
    st.session_state.paths_anim_speed = 120  # segments per second (기본 120)

# =========================
# Sidebar (Access Key + 만료일)
# =========================
st.sidebar.header("Access")

ALLOWED_WITH_EXPIRY = {
    "robotics5107": None,
    "kmou*": "2026-12-31",
}
access_key = st.sidebar.text_input("Access Key", type="password", key="access_key")

def check_key_valid(k: str):
    if not k or k not in ALLOWED_WITH_EXPIRY:
        return False, None, None, "유효하지 않은 키입니다."
    exp = ALLOWED_WITH_EXPIRY[k]
    if exp is None:
        return True, None, None, "만료일 없음"
    try:
        exp_date = date.fromisoformat(exp)
    except Exception:
        return False, None, None, "키 만료일 형식 오류(YYYY-MM-DD)."
    today = date.today()
    remaining = (exp_date - today).days
    if remaining < 0:
        return False, exp_date, remaining, f"만료일 경과: {exp_date.isoformat()}"
    elif remaining == 0:
        return True, exp_date, remaining, f"오늘 만료 ({exp_date.isoformat()})"
    else:
        return True, exp_date, remaining, f"만료일: {exp_date.isoformat()} · {remaining}일 남음"

KEY_OK, EXP_DATE, REMAINING, STATUS_TXT = check_key_valid(access_key)

# 상태 표시
if access_key:
    if KEY_OK:
        if EXP_DATE is None:
            st.sidebar.success(STATUS_TXT)
        else:
            d_mark = f"D-{REMAINING}" if REMAINING > 0 else "D-DAY"
            st.sidebar.info(f"{STATUS_TXT} ({d_mark})")
    else:
        st.sidebar.error(STATUS_TXT)
else:
    st.sidebar.warning("Access Key를 입력하세요.")

# 업로드는 키 없으면 비활성화
uploaded = st.sidebar.file_uploader("Upload STL", type=["stl"], disabled=not KEY_OK)

st.sidebar.header("Parameters")
z_int = st.sidebar.number_input("Z interval (mm)", 1.0, 1000.0, 15.0)
feed = st.sidebar.number_input("Feedrate (F)", 1, 100000, 2000)
ref_x = st.sidebar.number_input("Reference X", value=0.0)
ref_y = st.sidebar.number_input("Reference Y", value=0.0)

st.sidebar.subheader("Extrusion options")
e_on = st.sidebar.checkbox("Insert E values")
start_e_on = st.sidebar.checkbox("Continuous Layer Printing", value=False, disabled=not e_on)
start_e_val = st.sidebar.number_input("Start E value", value=0.1, disabled=not (e_on and start_e_on))
e0_on = st.sidebar.checkbox("Add E0 at loop end", value=False, disabled=not e_on)

st.sidebar.subheader("Path processing")
trim_dist = st.sidebar.number_input("Trim/Layer Width (mm)", 0.0, 1000.0, 50.0)
min_spacing = st.sidebar.number_input("Minimum point spacing (mm)", 0.0, 1000.0, 3.0)
auto_start = st.sidebar.checkbox("Start next layer near previous start")
m30_on = st.sidebar.checkbox("Append M30 at end", value=False)

b1 = st.sidebar.container()
b2 = st.sidebar.container()

slice_clicked = b1.button("Slice Model", use_container_width=True)
gen_clicked = b2.button("Generate G-Code", use_container_width=True)

# =========================
# Load mesh on upload
# =========================
if uploaded is not None:
    with tempfile.NamedTemporaryFile(delete=False, suffix=".stl") as tmp:
        tmp.write(uploaded.read())
        tmp_path = tmp.name
    mesh = trimesh.load_mesh(tmp_path)
    if not isinstance(mesh, trimesh.Trimesh):
        st.error("STL must contain a single mesh")
        st.stop()
    # Z 축 미세 확장 (최대 Z 절단면 인식 보정)
    scale_matrix = np.eye(4)
    scale_matrix[2, 2] = 1.0000001
    mesh.apply_transform(scale_matrix)
    st.session_state.mesh = mesh

    # 업로드 원본 파일명 저장 (확장자 제외)
    st.session_state.base_name = Path(uploaded.name).stem or "output"

# =========================
# Actions
# =========================
if KEY_OK and slice_clicked and st.session_state.mesh is not None:
    items = compute_slice_paths_with_travel(
        st.session_state.mesh,
        z_int=z_int,
        ref_pt_user=(ref_x, ref_y),
        trim_dist=trim_dist,
        min_spacing=min_spacing,
        auto_start=auto_start,
        e_on=e_on
    )
    st.session_state.paths_items = items
    # 슬라이스 새로 만들면 애니메이션 상태 초기화
    st.session_state.paths_anim_index = 0
    st.session_state.paths_anim_play = False
    st.session_state.paths_z_filter = None
    st.success("Slicing complete")

if KEY_OK and gen_clicked and st.session_state.mesh is not None:
    gcode_text = generate_gcode(
        st.session_state.mesh,
        z_int=z_int,
        feed=feed,
        ref_pt_user=(ref_x, ref_y),
        e_on=e_on,
        start_e_on=start_e_on,
        start_e_val=start_e_val,
        e0_on=e0_on,
        trim_dist=trim_dist,
        min_spacing=min_spacing,
        auto_start=auto_start,
        m30_on=m30_on
    )
    st.session_state.gcode_text = gcode_text
    st.success("G-code ready")

if st.session_state.get("gcode_text"):
    base = st.session_state.get("base_name", "output")
    st.sidebar.download_button(
        "G-code 저장",
        st.session_state.gcode_text,
        file_name=f"{base}.gcode",
        mime="text/plain",
        use_container_width=True
    )

# =========================
# >>> Rapid(MODX) 추가 기능 (cone1500 형식) <<<
# =========================
def _fmt_pos(v: float) -> str:
    # +0000.0
    s = f"{v:+.1f}"
    sign = s[0]
    intpart, dec = s[1:].split(".")
    intpart = intpart.zfill(4)
    return f"{sign}{intpart}.{dec}"

def _fmt_ang(v: float) -> str:
    # +000.00
    s = f"{v:+.2f}"
    sign = s[0]
    intpart, dec = s[1:].split(".")
    intpart = intpart.zfill(3)
    return f"{sign}{intpart}.{dec}"

PAD_LINE = '+0000.0,+0000.0,+0000.0,+000.00,+000.00,+000.00,+0000.0,+0000.0,+0000.0,+0000.0'
MAX_LINES = 64000

def _extract_xyz_lines_count(gcode_text: str) -> int:
    """G-code에서 X/Y/Z 좌표 지정이 포함된 G0/G1 라인의 개수만 카운트"""
    cnt = 0
    for raw in gcode_text.splitlines():
        t = raw.strip()
        if not (t.startswith("G0") or t.startswith("G00") or t.startswith("G1") or t.startswith("G01")):
            continue
        has_xyz = any(p.startswith(("X", "Y", "Z")) for p in t.split())
        if has_xyz:
            cnt += 1
    return cnt

def gcode_to_cone1500_module(gcode_text: str, rx: float, ry: float, rz: float) -> str:
    """
    cone1500.modx 스타일 MODULE 생성:
      MODULE Converted
      VAR string sFileCount := "64000";
      VAR string d3dpDynLoad{64000} := [
        "X,Y,Z,Rx,Ry,Rz,A1,A2,A3,A4",
        ...
      ];
      ENDMODULE
    좌표 라인이 부족하면 PAD_LINE으로 채움(정확히 64,000줄).
    """
    lines_out = []
    cur_x = 0.0
    cur_y = 0.0
    cur_z = 0.0
    frx = _fmt_ang(rx)
    fry = _fmt_ang(ry)
    frz = _fmt_ang(rz)
    tail = "+0000.0,+0000.0,+0000.0,+0000.0"

    for raw in gcode_text.splitlines():
        t = raw.strip()
        if not t or not (t.startswith("G0") or t.startswith("G00") or t.startswith("G1") or t.startswith("G01")):
            continue

        parts = t.split()
        has_xyz = False
        for p in parts:
            if p.startswith("X"):
                try:
                    cur_x = float(p[1:])
                    has_xyz = True
                except:
                    pass
            elif p.startswith("Y"):
                try:
                    cur_y = float(p[1:])
                    has_xyz = True
                except:
                    pass
            elif p.startswith("Z"):
                try:
                    cur_z = float(p[1:])
                    has_xyz = True
                except:
                    pass

        if not has_xyz:
            continue

        fx = _fmt_pos(cur_x)
        fy = _fmt_pos(cur_y)
        fz = _fmt_pos(cur_z)
        lines_out.append(f'{fx},{fy},{fz},{frx},{fry},{frz},{tail}')
        if len(lines_out) >= MAX_LINES:
            break

    # 패딩
    while len(lines_out) < MAX_LINES:
        lines_out.append(PAD_LINE)

    # MODULE 래핑
    ts = datetime.now().strftime("%Y-%m-%d %p %I:%M:%S")
    header = (
        "MODULE Converted\n"
        "!***************************************************************...****************************************************************\n"
        "!*\n"
        f"!*** Generated {ts} by Gcode→RAPID converter.\n"
        "!\n"
        "!*** data3dp syntax: X(mm), Y(mm), Z(mm), Rx(deg), Ry(deg), Rz(deg), A1,A2,A3,A4\n"
        "!\n"
        "!***************************************************************...****************************************************************\n"
    )
    cnt_str = str(MAX_LINES)
    open_decl = f'VAR string sFileCount:="{cnt_str}";\nVAR string d3dpDynLoad{{{cnt_str}}}:=[\n'
    body = ""
    for i, ln in enumerate(lines_out):
        q = f'"{ln}"'
        if i < len(lines_out) - 1:
            body += q + ",\n"
        else:
            body += q + "\n"
    close_decl = "];\nENDMODULE\n"
    return header + open_decl + body + close_decl

# 사이드바: Generate Rapid
st.sidebar.markdown("---")
if KEY_OK:
    if st.sidebar.button("Generate Rapid", use_container_width=True):
        st.session_state.show_rapid_panel = True

    if st.session_state.show_rapid_panel:
        with st.sidebar.expander("Rapid Settings", expanded=True):
            st.session_state.rapid_rx = st.number_input("Rx (deg)", value=float(st.session_state.rapid_rx), step=0.1, format="%.2f")
            st.session_state.rapid_ry = st.number_input("Ry (deg)", value=float(st.session_state.rapid_ry), step=0.1, format="%.2f")
            st.session_state.rapid_rz = st.number_input("Rz (deg)", value=float(st.session_state.rapid_rz), step=0.1, format="%.2f")

            gtxt = st.session_state.get("gcode_text")
            over = None
            if gtxt is not None:
                xyz_count = _extract_xyz_lines_count(gtxt)
                over = (xyz_count > MAX_LINES)

            save_rapid_clicked = st.button("Save Rapid", use_container_width=True, disabled=(gtxt is None))
            if gtxt is None:
                st.info("먼저 Generate G-Code로 G-code를 생성하세요.")
            elif over:
                st.error("G-code가 64,000줄을 초과하여 Rapid 파일 변환할 수 없습니다.")
            elif save_rapid_clicked:
                st.session_state.rapid_text = gcode_to_cone1500_module(
                    gtxt,
                    rx=st.session_state.rapid_rx,
                    ry=st.session_state.rapid_ry,
                    rz=st.session_state.rapid_rz,
                )
                st.success("Rapid(MODX, cone1500 형식) 변환 완료")

            if st.session_state.get("rapid_text"):
                base = st.session_state.get("base_name", "output")
                st.download_button(
                    "Rapid 저장 (.modx)",
                    st.session_state.rapid_text,
                    file_name=f"{base}.modx",
                    mime="text/plain",
                    use_container_width=True
                )

# =========================
# Right: Viewers (크게)
# =========================
tab_stl, tab_paths, tab_gcode = st.tabs(["STL Preview", "Sliced Paths (3D)", "G-code Viewer"])

with tab_stl:
    if st.session_state.get("mesh") is not None:
        st.plotly_chart(
            plot_trimesh(st.session_state.mesh, height=820),
            use_container_width=True
        )
    else:
        st.info("STL을 업로드하세요.")

with tab_paths:
    if st.session_state.get("paths_items") is not None:
        # --- NEW: Z 필터 슬라이더 & 재생 컨트롤 ---
        mesh_zmax = float(st.session_state.mesh.bounds[1, 2]) if st.session_state.mesh is not None else 0.0
        colA, colB, colC, colD = st.columns([3, 2, 2, 3])

        with colA:
            z_filter_enable = st.checkbox("Z 필터 사용", value=(st.session_state.paths_z_filter is not None))
        with colB:
            if z_filter_enable:
                st.session_state.paths_z_filter = st.slider(
                    "Z ≤", min_value=0.0, max_value=max(0.1, mesh_zmax), value=float(st.session_state.paths_z_filter or mesh_zmax),
                    step=max(0.01, min(1.0, mesh_zmax/200.0))
                )
            else:
                st.session_state.paths_z_filter = None

        with colC:
            st.session_state.paths_anim_speed = st.number_input(
                "속도 (segments/s)", min_value=1, max_value=2000, value=int(st.session_state.paths_anim_speed), step=10
            )

        with colD:
            c1, c2, c3 = st.columns(3)
            # ▶/⏸ 토글
            if c1.button("▶ Play" if not st.session_state.paths_anim_play else "⏸ Pause", use_container_width=True):
                st.session_state.paths_anim_play = not st.session_state.paths_anim_play
            # ⏮ Reset
            if c2.button("⏮ Reset", use_container_width=True):
                st.session_state.paths_anim_index = 0
                st.session_state.paths_anim_play = False
            # ⏭ End
            if c3.button("⏭ End", use_container_width=True):
                # 끝까지 채우고 일시정지
                # (세그먼트 수는 아래에서 계산)
                st.session_state.paths_anim_play = False
                # anim_index는 아래에서 segments 수로 맞춤

        # 세그먼트 생성(필터 적용)
        segments = items_to_segments(
            st.session_state.paths_items,
            e_on=e_on,
            z_filter=st.session_state.paths_z_filter
        )
        total_segments = len(segments)

        # End 버튼이 눌린 경우 인덱스 정렬
        if not st.session_state.paths_anim_play and st.session_state.paths_anim_index > total_segments:
            st.session_state.paths_anim_index = total_segments

        # 스크럽바(수동 탐색)
        scrub = st.slider(
            "진행(segments)", 0, max(1, total_segments), value=min(st.session_state.paths_anim_index, total_segments),
            help="좌우로 드래그해 해당 세그먼트까지의 경로를 표시"
        )
        st.session_state.paths_anim_index = scrub

        placeholder = st.empty()

        # 재생 중이면 순차적으로 증가
        if st.session_state.paths_anim_play and total_segments > 0:
            start_i = st.session_state.paths_anim_index
            speed = max(1, int(st.session_state.paths_anim_speed))
            delay = 1.0 / float(speed)

            for i in range(start_i, total_segments + 1):
                st.session_state.paths_anim_index = i
                fig = plot_segments_partial(segments, upto_count=i, height=820)
                placeholder.plotly_chart(fig, use_container_width=True)
                time.sleep(delay)
                # 중간에 Pause 눌린 경우 탈출
                if not st.session_state.paths_anim_play:
                    break
            # 끝까지 재생되면 자동 정지
            if st.session_state.paths_anim_index >= total_segments:
                st.session_state.paths_anim_play = False
        else:
            # 재생 중이 아니면 현재 인덱스까지만 그림
            fig = plot_segments_partial(segments, upto_count=st.session_state.paths_anim_index, height=820)
            placeholder.plotly_chart(fig, use_container_width=True)

    else:
        st.info("슬라이싱을 실행하세요.")

with tab_gcode:
    if st.session_state.get("gcode_text"):
        st.code(st.session_state.gcode_text, language="gcode")
    else:
        st.info("G-code를 생성하세요.")

# 키가 없거나 만료 시 안내
if not KEY_OK:
    st.warning("유효한 Access Key를 입력해야 프로그램이 작동합니다. (업로드/슬라이싱/G-code 버튼 비활성화)")
